{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tomma\\\\bootcamp\\\\poly-flow\\\\my-app\\\\client\\\\src\\\\components\\\\TestModules.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TestModules = () => {\n  _s();\n  console.log('test page rendering');\n  const [numCircles, setNumCircles] = useState(Math.floor(Math.random() * 10));\n  const [timeOffset, setTimeOffset] = useState(Math.random());\n  const [time, setTime] = useState(0);\n  useEffect(() => {\n    const update = t => {\n      setTime(t / 1000);\n      requestAnimationFrame(update);\n    };\n    requestAnimationFrame(update);\n  }, []);\n  let circles = [];\n  for (let i = 0; i < numCircles; i++) {\n    circles.push( /*#__PURE__*/_jsxDEV(\"circle\", {\n      cx: 100 + i * 10,\n      cy: 250,\n      r: Math.sin(time + i * timeOffset) * 40 + 40,\n      stroke: \"white\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 18\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"do you render this page?\", /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: \"500\",\n      height: \"500\",\n      style: {\n        backgroundColor: '#211'\n      },\n      children: circles\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }, this), \"Number of circles: \", /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: numCircles,\n      onChange: e => setNumCircles(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 24\n    }, this), \"Time offset: \", /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: timeOffset,\n      onChange: e => setTimeOffset(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 18\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 3\n  }, this);\n};\n_s(TestModules, \"Sbt51yByZQgOisOHmFZ5VsM/Cg0=\");\n_c = TestModules;\nexport default TestModules;\nvar _c;\n$RefreshReg$(_c, \"TestModules\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","TestModules","_s","console","log","numCircles","setNumCircles","Math","floor","random","timeOffset","setTimeOffset","time","setTime","update","t","requestAnimationFrame","circles","i","push","cx","cy","r","sin","stroke","fileName","_jsxFileName","lineNumber","columnNumber","children","width","height","style","backgroundColor","type","value","onChange","e","target","_c","$RefreshReg$"],"sources":["C:/Users/tomma/bootcamp/poly-flow/my-app/client/src/components/TestModules.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst TestModules = () => {\r\n\r\n    console.log('test page rendering');\r\n  const [numCircles, setNumCircles] = useState(Math.floor(Math.random() * 10));\r\n  const [timeOffset, setTimeOffset] = useState(Math.random());\r\n\r\n  const [time, setTime] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const update = (t) => {\r\n      setTime(t / 1000);\r\n      requestAnimationFrame(update);\r\n    }\r\n\r\n    requestAnimationFrame(update);\r\n  }, [])\r\n\r\n  let circles = []\r\n  for (let i = 0; i < numCircles; i++) {\r\n    circles.push(<circle cx={100 + (i * 10)} cy={250} r={Math.sin(time + (i * timeOffset)) * 40 + 40} stroke=\"white\" />)\r\n  }\r\n\r\n  return (\r\n  <div>\r\n    do you render this page?\r\n\r\n    <svg width=\"500\" height=\"500\" style={{backgroundColor: '#211'}}>\r\n      {circles}\r\n    </svg>\r\n\r\n    Number of circles: <input type=\"number\" value={numCircles} onChange={(e) => setNumCircles(e.target.value)} />\r\n    Time offset: <input type=\"number\" value={timeOffset} onChange={(e) => setTimeOffset(e.target.value)} />\r\n\r\n  </div>\r\n  );\r\n};\r\n\r\nexport default TestModules;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEtBC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;EACpC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAACU,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;EAC5E,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAACU,IAAI,CAACE,MAAM,CAAC,CAAC,CAAC;EAE3D,MAAM,CAACG,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC;EAEnCC,SAAS,CAAC,MAAM;IACd,MAAMgB,MAAM,GAAIC,CAAC,IAAK;MACpBF,OAAO,CAACE,CAAC,GAAG,IAAI,CAAC;MACjBC,qBAAqB,CAACF,MAAM,CAAC;IAC/B,CAAC;IAEDE,qBAAqB,CAACF,MAAM,CAAC;EAC/B,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIG,OAAO,GAAG,EAAE;EAChB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,UAAU,EAAEa,CAAC,EAAE,EAAE;IACnCD,OAAO,CAACE,IAAI,eAACnB,OAAA;MAAQoB,EAAE,EAAE,GAAG,GAAIF,CAAC,GAAG,EAAI;MAACG,EAAE,EAAE,GAAI;MAACC,CAAC,EAAEf,IAAI,CAACgB,GAAG,CAACX,IAAI,GAAIM,CAAC,GAAGR,UAAW,CAAC,GAAG,EAAE,GAAG,EAAG;MAACc,MAAM,EAAC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,CAAC;EACtH;EAEA,oBACA5B,OAAA;IAAA6B,QAAA,GAAK,0BAGH,eAAA7B,OAAA;MAAK8B,KAAK,EAAC,KAAK;MAACC,MAAM,EAAC,KAAK;MAACC,KAAK,EAAE;QAACC,eAAe,EAAE;MAAM,CAAE;MAAAJ,QAAA,EAC5DZ;IAAO;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,uBAEa,eAAA5B,OAAA;MAAOkC,IAAI,EAAC,QAAQ;MAACC,KAAK,EAAE9B,UAAW;MAAC+B,QAAQ,EAAGC,CAAC,IAAK/B,aAAa,CAAC+B,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAV,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,iBAChG,eAAA5B,OAAA;MAAOkC,IAAI,EAAC,QAAQ;MAACC,KAAK,EAAEzB,UAAW;MAAC0B,QAAQ,EAAGC,CAAC,IAAK1B,aAAa,CAAC0B,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAV,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEpG,CAAC;AAER,CAAC;AAAC1B,EAAA,CAnCID,WAAW;AAAAsC,EAAA,GAAXtC,WAAW;AAqCjB,eAAeA,WAAW;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}